import { useState, useRef } from 'react'
import { Editor } from '@monaco-editor/react'
import type { CodeSnippet, DevFlowNode } from '@/types'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Badge } from '@/components/ui/badge'
import { Textarea } from '@/components/ui/textarea'
import { 
  Plus, 
  X, 
  Copy, 
  Download, 
  Edit2, 
 
  Code2,
  FileText,
  Tag,
  Bot
} from 'lucide-react'
import { cn, copyToClipboard, downloadFile } from '@/lib/utils'
import { AICodeAssistantButton } from '@/components/ai'

interface CodeEditorProps {
  codeSnippets: CodeSnippet[]
  onAddSnippet?: (snippet: Omit<CodeSnippet, 'id'>) => void
  onUpdateSnippet?: (snippetId: string, updates: Partial<CodeSnippet>) => void
  onDeleteSnippet?: (snippetId: string) => void
  className?: string
  maxHeight?: string
  node?: DevFlowNode
}

interface NewSnippet {
  title: string
  language: string
  code: string
  description: string
  isTemplate: boolean
  tags: string[]
}

const COMMON_LANGUAGES = [
  'javascript', 'typescript', 'python', 'java', 'csharp', 'cpp', 'c',
  'html', 'css', 'scss', 'json', 'xml', 'yaml', 'markdown', 'sql',
  'bash', 'powershell', 'dockerfile', 'go', 'rust', 'php', 'ruby'
]

export function CodeEditor({
  codeSnippets,
  onAddSnippet,
  onUpdateSnippet,
  onDeleteSnippet,
  className,
  maxHeight = "400px",
  node
}: CodeEditorProps) {
  const [isAddingSnippet, setIsAddingSnippet] = useState(false)
  const [editingSnippet, setEditingSnippet] = useState<string | null>(null)
  const [selectedSnippet, setSelectedSnippet] = useState<string | null>(
    codeSnippets.length > 0 ? codeSnippets[0].id : null
  )
  const [newSnippet, setNewSnippet] = useState<NewSnippet>({
    title: '',
    language: 'javascript',
    code: '',
    description: '',
    isTemplate: false,
    tags: []
  })
  const [newTag, setNewTag] = useState('')
  const editorRef = useRef<any>(null)

  const currentSnippet = codeSnippets.find(s => s.id === selectedSnippet)

  const handleAddSnippet = () => {
    if (newSnippet.title.trim() && newSnippet.code.trim()) {
      onAddSnippet?.({
        ...newSnippet,
        title: newSnippet.title.trim(),
        code: newSnippet.code.trim(),
        description: newSnippet.description.trim()
      })
      setNewSnippet({
        title: '',
        language: 'javascript',
        code: '',
        description: '',
        isTemplate: false,
        tags: []
      })
      setIsAddingSnippet(false)
    }
  }

  const handleUpdateSnippet = (snippetId: string, updates: Partial<CodeSnippet>) => {
    onUpdateSnippet?.(snippetId, updates)
    setEditingSnippet(null)
  }

  const handleCopyCode = async (code: string) => {
    try {
      await copyToClipboard(code)
      // Could add toast notification here
    } catch (error) {
      console.error('Failed to copy code:', error)
    }
  }

  const handleDownloadCode = (snippet: CodeSnippet) => {
    const extension = getFileExtension(snippet.language)
    const filename = `${snippet.title.replace(/[^a-zA-Z0-9]/g, '_')}.${extension}`
    downloadFile(snippet.code, filename, 'text/plain')
  }

  const getFileExtension = (language: string): string => {
    const extensions: Record<string, string> = {
      javascript: 'js',
      typescript: 'ts',
      python: 'py',
      java: 'java',
      csharp: 'cs',
      cpp: 'cpp',
      c: 'c',
      html: 'html',
      css: 'css',
      scss: 'scss',
      json: 'json',
      xml: 'xml',
      yaml: 'yml',
      markdown: 'md',
      sql: 'sql',
      bash: 'sh',
      powershell: 'ps1',
      dockerfile: 'dockerfile',
      go: 'go',
      rust: 'rs',
      php: 'php',
      ruby: 'rb'
    }
    return extensions[language.toLowerCase()] || 'txt'
  }

  const addTag = () => {
    if (newTag.trim() && !newSnippet.tags.includes(newTag.trim().toLowerCase())) {
      setNewSnippet(prev => ({
        ...prev,
        tags: [...prev.tags, newTag.trim().toLowerCase()]
      }))
      setNewTag('')
    }
  }

  const removeTag = (tagToRemove: string) => {
    setNewSnippet(prev => ({
      ...prev,
      tags: prev.tags.filter(tag => tag !== tagToRemove)
    }))
  }

  const handleAICodeGenerated = (code: string, language: string, title?: string) => {
    if (isAddingSnippet) {
      // Update the new snippet form
      setNewSnippet(prev => ({
        ...prev,
        code,
        language,
        title: title || prev.title || 'AI Generated Code'
      }))
    } else {
      // Create a new snippet directly
      onAddSnippet?.({
        title: title || 'AI Generated Code',
        language,
        code,
        description: 'Generated by AI Assistant',
        isTemplate: false,
        tags: ['ai-generated']
      })
    }
  }

  const handleAISuggestionApplied = (suggestion: string) => {
    if (currentSnippet && editingSnippet === currentSnippet.id) {
      // Apply suggestion to current snippet
      handleUpdateSnippet(currentSnippet.id, { 
        code: suggestion,
        description: currentSnippet.description + '\n\nUpdated with AI suggestions'
      })
    }
  }

  return (
    <div className={cn("space-y-3", className)}>
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-2">
          <Code2 className="h-4 w-4" />
          <h3 className="text-sm font-medium">Code Snippets</h3>
          <Badge variant="outline" className="text-xs">
            {codeSnippets.length}
          </Badge>
        </div>
        <div className="flex items-center gap-1">
          <AICodeAssistantButton
            node={node}
            currentSnippet={currentSnippet}
            onCodeGenerated={handleAICodeGenerated}
            onSuggestionApplied={handleAISuggestionApplied}
            className="h-6 px-2 text-xs"
          />
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsAddingSnippet(true)}
            className="h-6 w-6 p-0"
          >
            <Plus className="h-4 w-4" />
          </Button>
        </div>
      </div>

      {/* Snippet tabs */}
      {codeSnippets.length > 0 && (
        <div className="flex gap-1 overflow-x-auto pb-1">
          {codeSnippets.map((snippet) => (
            <Button
              key={snippet.id}
              variant={selectedSnippet === snippet.id ? "default" : "outline"}
              size="sm"
              onClick={() => setSelectedSnippet(snippet.id)}
              className="h-7 text-xs whitespace-nowrap"
            >
              {snippet.title}
              {snippet.isTemplate && <FileText className="h-3 w-3 ml-1" />}
            </Button>
          ))}
        </div>
      )}

      {/* Add new snippet form */}
      {isAddingSnippet && (
        <div className="space-y-3 p-3 border rounded-md">
          <div className="flex items-center gap-2">
            <Input
              placeholder="Snippet title"
              value={newSnippet.title}
              onChange={(e) => setNewSnippet(prev => ({ ...prev, title: e.target.value }))}
              className="flex-1 h-8"
            />
            <select
              value={newSnippet.language}
              onChange={(e) => setNewSnippet(prev => ({ ...prev, language: e.target.value }))}
              className="h-8 px-2 border rounded text-sm"
            >
              {COMMON_LANGUAGES.map(lang => (
                <option key={lang} value={lang}>{lang}</option>
              ))}
            </select>
          </div>

          <div style={{ height: '200px' }}>
            <Editor
              height="100%"
              language={newSnippet.language}
              value={newSnippet.code}
              onChange={(value) => setNewSnippet(prev => ({ ...prev, code: value || '' }))}
              theme="vs-dark"
              options={{
                minimap: { enabled: false },
                fontSize: 12,
                lineNumbers: 'on',
                scrollBeyondLastLine: false,
                automaticLayout: true
              }}
            />
          </div>

          <Textarea
            placeholder="Description (optional)"
            value={newSnippet.description}
            onChange={(e) => setNewSnippet(prev => ({ ...prev, description: e.target.value }))}
            className="h-16 text-sm"
          />

          {/* Tags */}
          <div className="space-y-2">
            <div className="flex items-center gap-2">
              <Input
                placeholder="Add tag"
                value={newTag}
                onChange={(e) => setNewTag(e.target.value)}
                onKeyDown={(e) => e.key === 'Enter' && (e.preventDefault(), addTag())}
                className="flex-1 h-7 text-sm"
              />
              <Button
                variant="ghost"
                size="sm"
                onClick={addTag}
                className="h-7 w-7 p-0"
              >
                <Tag className="h-3 w-3" />
              </Button>
            </div>
            {newSnippet.tags.length > 0 && (
              <div className="flex flex-wrap gap-1">
                {newSnippet.tags.map((tag) => (
                  <Badge
                    key={tag}
                    variant="outline"
                    className="text-xs px-1 py-0 h-5 cursor-pointer"
                    onClick={() => removeTag(tag)}
                  >
                    {tag} <X className="h-2 w-2 ml-1" />
                  </Badge>
                ))}
              </div>
            )}
          </div>

          <div className="flex items-center justify-between">
            <label className="flex items-center gap-2 text-sm">
              <input
                type="checkbox"
                checked={newSnippet.isTemplate}
                onChange={(e) => setNewSnippet(prev => ({ ...prev, isTemplate: e.target.checked }))}
              />
              Mark as template
            </label>
            <div className="flex gap-2">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setIsAddingSnippet(false)}
                className="h-7"
              >
                Cancel
              </Button>
              <Button
                size="sm"
                onClick={handleAddSnippet}
                disabled={!newSnippet.title.trim() || !newSnippet.code.trim()}
                className="h-7"
              >
                Add Snippet
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Current snippet viewer/editor */}
      {currentSnippet && (
        <div className="space-y-2">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <h4 className="text-sm font-medium">{currentSnippet.title}</h4>
              <Badge variant="outline" className="text-xs">
                {currentSnippet.language}
              </Badge>
              {currentSnippet.isTemplate && (
                <Badge variant="outline" className="text-xs">
                  <FileText className="h-3 w-3 mr-1" />
                  Template
                </Badge>
              )}
            </div>
            <div className="flex items-center gap-1">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => handleCopyCode(currentSnippet.code)}
                className="h-6 w-6 p-0"
                title="Copy code"
              >
                <Copy className="h-3 w-3" />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => handleDownloadCode(currentSnippet)}
                className="h-6 w-6 p-0"
                title="Download file"
              >
                <Download className="h-3 w-3" />
              </Button>
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setEditingSnippet(currentSnippet.id)}
                className="h-6 w-6 p-0"
                title="Edit snippet"
              >
                <Edit2 className="h-3 w-3" />
              </Button>
              <AICodeAssistantButton
                node={node}
                currentSnippet={currentSnippet}
                onCodeGenerated={handleAICodeGenerated}
                onSuggestionApplied={handleAISuggestionApplied}
                className="h-6 px-1 text-xs"
              />
              <Button
                variant="ghost"
                size="sm"
                onClick={() => onDeleteSnippet?.(currentSnippet.id)}
                className="h-6 w-6 p-0 text-red-600"
                title="Delete snippet"
              >
                <X className="h-3 w-3" />
              </Button>
            </div>
          </div>

          <div style={{ height: maxHeight }}>
            <Editor
              height="100%"
              language={currentSnippet.language}
              value={currentSnippet.code}
              onChange={(value) => {
                if (editingSnippet === currentSnippet.id) {
                  handleUpdateSnippet(currentSnippet.id, { code: value || '' })
                }
              }}
              theme="vs-dark"
              options={{
                readOnly: editingSnippet !== currentSnippet.id,
                minimap: { enabled: false },
                fontSize: 12,
                lineNumbers: 'on',
                scrollBeyondLastLine: false,
                automaticLayout: true
              }}
              onMount={(editor) => {
                editorRef.current = editor
              }}
            />
          </div>

          {currentSnippet.description && (
            <p className="text-sm text-muted-foreground">
              {currentSnippet.description}
            </p>
          )}

          {currentSnippet.tags.length > 0 && (
            <div className="flex flex-wrap gap-1">
              {currentSnippet.tags.map((tag) => (
                <Badge key={tag} variant="outline" className="text-xs px-1 py-0 h-4">
                  {tag}
                </Badge>
              ))}
            </div>
          )}
        </div>
      )}

      {codeSnippets.length === 0 && !isAddingSnippet && (
        <div className="text-center py-8 text-sm text-muted-foreground">
          No code snippets yet. Click the + button to add one.
        </div>
      )}
    </div>
  )
}